
// mixins for grid system
// ------------------------
.make-row(@gutter: @grid-gutter-width) {
  position: relative;
  margin-left: (@gutter / -2);
  margin-right: (@gutter / -2);
  height: auto;
  .clearfix;
}

.make-grid-columns() {
  .col(@index) {
    @item: ~".@{vcu-prefix}-col-@{index}, .@{vcu-prefix}-col-xs-@{index}, .@{vcu-prefix}-col-sm-@{index}, .@{vcu-prefix}-col-md-@{index}, .@{vcu-prefix}-col-lg-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) {
    @item: ~".@{vcu-prefix}-col-@{index}, .@{vcu-prefix}-col-xs-@{index}, .@{vcu-prefix}-col-sm-@{index}, .@{vcu-prefix}-col-md-@{index}, .@{vcu-prefix}-col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) {
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      padding-left: (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
    }
  }
  .col(1);
}

.float-grid-columns(@class) {
  .col(@index) { // initial
    @item: ~".@{vcu-prefix}-col@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".@{vcu-prefix}-col@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
      flex: 0 0 auto;
    }
  }
  .col(1); // kickstart it
}

// lesshint false
.loop-grid-columns(@index, @class) when (@index > 0) {
  .@{vcu-prefix}-col@{class}-@{index} {
    display: block;
    box-sizing: border-box;
    width: percentage((@index / @grid-columns));
  }
  .@{vcu-prefix}-col@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
  .@{vcu-prefix}-col@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
  .@{vcu-prefix}-col@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
  .@{vcu-prefix}-col@{class}-order-@{index} {
    order: @index;
  }
  .loop-grid-columns((@index - 1), @class);
}

.loop-grid-columns(@index, @class) when (@index = 0) {
  .@{vcu-prefix}-col@{class}-@{index} {
    display: none;
  }
  .@{vcu-prefix}-col-push-@{index} {
    left: auto;
  }
  .@{vcu-prefix}-col-pull-@{index} {
    right: auto;
  }
  .@{vcu-prefix}-col@{class}-push-@{index} {
    left: auto;
  }
  .@{vcu-prefix}-col@{class}-pull-@{index} {
    right: auto;
  }
  .@{vcu-prefix}-col@{class}-offset-@{index} {
    margin-left: 0;
  }
  .@{vcu-prefix}-col@{class}-order-@{index} {
    order: 0;
  }
}

.make-grid(@class: ~'') {
  .float-grid-columns(@class);
  .loop-grid-columns(@grid-columns, @class);
}


// Grid system
.@{vcu-prefix}-row {
  .make-row();
  display: block;
  box-sizing: border-box;
}

.@{vcu-prefix}-row-flex {
  display: flex;
  flex-flow: row wrap;

  &:before,
  &:after {
    display: flex;
  }
}

// x轴原点
.@{vcu-prefix}-row-flex-start {
  justify-content: flex-start;
}

// x轴居中
.@{vcu-prefix}-row-flex-center {
  justify-content: center;
}

// x轴反方向
.@{vcu-prefix}-row-flex-end {
  justify-content: flex-end;
}

// x轴平分
.@{vcu-prefix}-row-flex-space-between {
  justify-content: space-between;
}

// x轴有间隔地平分
.@{vcu-prefix}-row-flex-space-around {
  justify-content: space-around;
}

// 顶部对齐
.@{vcu-prefix}-row-flex-top {
  align-items: flex-start;
}

// 居中对齐
.@{vcu-prefix}-row-flex-middle {
  align-items: center;
}

// 底部对齐
.@{vcu-prefix}-row-flex-bottom {
  align-items: flex-end;
}

.@{vcu-prefix}-col {
  position: relative;
  display: block;
}

.make-grid-columns();
.make-grid();

// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

.make-grid(-xs);

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: @screen-sm-min) {
  .make-grid(-sm);
}

// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: @screen-md-min) {
  .make-grid(-md);
}

// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: @screen-lg-min) {
  .make-grid(-lg);
}

// Extra Large grid
//
// Columns, offsets, pushes, and pulls for the full hd device range.

@media (min-width: @screen-xl-min) {
  .make-grid(-xl);
}

// Extra Extra Large grid
//
// Columns, offsets, pushes, and pulls for the full hd device range.

@media (min-width: @screen-xxl-min) {
  .make-grid(-xxl);
}
